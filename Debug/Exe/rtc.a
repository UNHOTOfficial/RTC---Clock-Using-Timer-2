;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.14 Advanced
;Automatic Program Generator
;? Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : Clock With RTC (Timer 2) And Alarm
;Version : 1.0.0
;Date    : 1/6/2025
;Author  : Mehdi Salmanzadeh
;Company :
;Comments:
;
;Chip type               : ATmega32A
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;#include <string.h>
;#include <alcd.h>
;
;// Global variables
;unsigned char h = 0, m = 0, s = 0;
;unsigned char alarm_h = 0, alarm_m = 0, alarm_s = 0;
;char clock_buffer[17]; // Buffer for clock display
;char alarm_buffer[17]; // Buffer for alarm display
;bit alarm_set = 0; // Flag to indicate if alarm is set
;
;// Function prototypes
;void display_info(void);
;void get_time(void);
;void set_time(void);
;void set_alarm(void);
;void check_alarm(void);
;
;// Timer2 overflow interrupt handler
;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
; 0000 002D {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 002E     static unsigned int timer2_overflow_count = 0;
; 0000 002F 
; 0000 0030     // With 32.768kHz crystal, prescaler 128, and 8-bit timer:
; 0000 0031     // Frequency = 32768/128 = 256Hz
; 0000 0032     // Timer overflows every 256 counts (8-bit timer)
; 0000 0033     // So we need 256Hz/256 = 1 overflow per second
; 0000 0034     timer2_overflow_count++;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0035     if(timer2_overflow_count >= 1)  // One second has passed
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0036     {
; 0000 0037         timer2_overflow_count = 0;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0038         s++;
;PCODE: $00000018 VOL: 0
; 0000 0039         if(s >= 60)
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 003A         {
; 0000 003B             s = 0;
;PCODE: $0000001C VOL: 0
; 0000 003C             m++;
;PCODE: $0000001D VOL: 0
; 0000 003D             if(m >= 60)
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 003E             {
; 0000 003F                 m = 0;
;PCODE: $00000021 VOL: 0
; 0000 0040                 h++;
;PCODE: $00000022 VOL: 0
; 0000 0041                 if(h >= 24)
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0042                 {
; 0000 0043                     h = 0;
;PCODE: $00000026 VOL: 0
; 0000 0044                 }
; 0000 0045             }
;PCODE: $00000027 VOL: 0
; 0000 0046         }
;PCODE: $00000028 VOL: 0
; 0000 0047     }
;PCODE: $00000029 VOL: 0
; 0000 0048 }
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;
;void main(void)
; 0000 004B {
;PCODE: $0000002E VOL: 0
; 0000 004C     // Port A initialization: All pins as input
; 0000 004D     DDRA = 0x00;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 004E     PORTA = 0x00;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 004F 
; 0000 0050     // Port B initialization: PB4 as output, others as input
; 0000 0051     DDRB = (1 << DDB4);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0052     PORTB = 0x00;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0053 
; 0000 0054     // Port C initialization: All pins as input
; 0000 0055     DDRC = 0x00;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0056     PORTC = 0x00;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0057 
; 0000 0058     // Port D initialization: All pins as input
; 0000 0059     DDRD = 0x00;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 005A     PORTD = 0x00;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 005B 
; 0000 005C     // Timer/Counter 2 initialization for RTC
; 0000 005D     // Crystal frequency = 32.768 kHz
; 0000 005E     // Timer clock = Crystal frequency / 128 = 256 Hz
; 0000 005F     ASSR = (1<<AS2);    // Enable asynchronous operation
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0060     TCNT2 = 0x00;       // Start counting from 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0061     OCR2 = 0x00;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0062     TCCR2 = (1<<CS22) | (0<<CS21) | (1<<CS20);  // Clock source: TOSC1 pin, prescaler 128
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0063 
; 0000 0064     // Wait for ASSR bits to be cleared
; 0000 0065     while(ASSR & ((1<<TCN2UB)|(1<<OCR2UB)|(1<<TCR2UB)));
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0066 
; 0000 0067     // Enable Timer2 overflow interrupt
; 0000 0068     TIMSK = (1<<TOIE2);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0069 
; 0000 006A     // Reset initial time
; 0000 006B     h = 0;
;PCODE: $0000004F VOL: 0
; 0000 006C     m = 0;
;PCODE: $00000050 VOL: 0
; 0000 006D     s = 0;
;PCODE: $00000051 VOL: 0
; 0000 006E 
; 0000 006F     // Enable global interrupts
; 0000 0070     #asm("sei")
;PCODE: $00000052 VOL: 0
	sei
;PCODE: $00000053 VOL: 0
; 0000 0071 
; 0000 0072     // Alphanumeric LCD initialization
; 0000 0073     lcd_init(16);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0074 
; 0000 0075     // Display name and student ID
; 0000 0076     display_info();
;PCODE: $00000056 VOL: 0
; 0000 0077 
; 0000 0078     while (1)
;PCODE: $00000057 VOL: 0
; 0000 0079     {
; 0000 007A         // Get and display the time
; 0000 007B         get_time();
;PCODE: $00000058 VOL: 0
; 0000 007C         delay_ms(100);  // Reduced delay for more responsive display
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 007D 
; 0000 007E         // Check if any button is pressed to set the time
; 0000 007F         if (PINB & (1 << PINB0) || PINB & (1 << PINB1) || PINB & (1 << PINB2) || PINB & (1 << PINB3))
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0080         {
; 0000 0081             set_time();
;PCODE: $0000006A VOL: 0
; 0000 0082         }
; 0000 0083 
; 0000 0084         // Check if the alarm set button is pressed
; 0000 0085         if (PINB & (1 << PINB5))
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0086         {
; 0000 0087             set_alarm();
;PCODE: $0000006F VOL: 0
; 0000 0088         }
; 0000 0089 
; 0000 008A         // Check the alarm
; 0000 008B         check_alarm();
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 008C     }
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 008D }
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;
;// Function to display name and student ID
;void display_info(void)
; 0000 0091 {
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0092     lcd_gotoxy(0, 0);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0093 
; 0000 0094     lcd_gotoxy(0, 1);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0095 
; 0000 0096     delay_ms(3000);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0097     lcd_clear();
;PCODE: $00000083 VOL: 0
; 0000 0098 }
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;
;// Function to get and display the time
;void get_time(void)
; 0000 009C {
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 009D     char period[3];
; 0000 009E     unsigned char display_h = h;
; 0000 009F 
; 0000 00A0     // Determine AM/PM period
; 0000 00A1     if (h >= 12)
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;	period -> Y+1
;	display_h -> R17
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00A2     {
; 0000 00A3         strcpy(period, "PM");
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00A4         if (h > 12)
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00A5         {
; 0000 00A6             display_h = h - 12;  // Convert from 24h to 12h format
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00A7         }
; 0000 00A8         else
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00A9         {
; 0000 00AA             display_h = 12;      // 12 PM case
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00AB         }
;PCODE: $0000009E VOL: 0
; 0000 00AC     }
; 0000 00AD     else
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00AE     {
; 0000 00AF         strcpy(period, "AM");
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00B0         if (h == 0)
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00B1         {
; 0000 00B2             display_h = 12;      // 12 AM case
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00B3         }
; 0000 00B4         else
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00B5         {
; 0000 00B6             display_h = h;       // Regular AM hours
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00B7         }
;PCODE: $000000AE VOL: 0
; 0000 00B8     }
;PCODE: $000000AF VOL: 0
; 0000 00B9 
; 0000 00BA     lcd_clear();
;PCODE: $000000B0 VOL: 0
; 0000 00BB     lcd_gotoxy(0, 0);
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00BC     sprintf(clock_buffer, "Time: %02d:%02d:%02d%s", display_h, m, s, period);
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00BD     lcd_puts(clock_buffer);
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00BE 
; 0000 00BF     // Display the alarm time
; 0000 00C0     lcd_gotoxy(0, 1);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00C1     if (alarm_set)
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00C2     {
; 0000 00C3         sprintf(alarm_buffer, "Alarm: %02d:%02d:%02d", alarm_h, alarm_m, alarm_s);
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00C4     }
; 0000 00C5     else
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00C6     {
; 0000 00C7         strcpy(alarm_buffer, "Alarm: Not set");
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 00C8     }
;PCODE: $000000EC VOL: 0
; 0000 00C9     lcd_puts(alarm_buffer);
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00CA }
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0

	.DSEG
_0x13:
	.BYTE 0x15
;
;// Function to set the time using buttons
;void set_time(void)
; 0000 00CE {

	.CSEG
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00CF     // Disable Timer2 interrupt while setting time
; 0000 00D0     TIMSK &= ~(1<<TOIE2);
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00D1 
; 0000 00D2     lcd_clear();
;PCODE: $000000F9 VOL: 0
; 0000 00D3     lcd_gotoxy(0, 0);
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 00D4     lcd_puts("Set Time:");
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 00D5 
; 0000 00D6     while (1)
;PCODE: $00000101 VOL: 0
; 0000 00D7     {
; 0000 00D8         // Check if button on PB0 is pressed to increment hour
; 0000 00D9         if (PINB & (1 << PINB0))
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00DA         {
; 0000 00DB             h = (h + 1) % 24;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00DC             lcd_gotoxy(0, 1);
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00DD             sprintf(clock_buffer, "Hour: %02d", h);
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00DE             lcd_puts(clock_buffer);
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00DF             delay_ms(50);
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00E0             while (PINB & (1 << PINB0));
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00E1             delay_ms(50);
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00E2         }
; 0000 00E3 
; 0000 00E4         // Check if button on PB1 is pressed to increment minute
; 0000 00E5         if (PINB & (1 << PINB1))
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 00E6         {
; 0000 00E7             m = (m + 1) % 60;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 00E8             lcd_gotoxy(0, 1);
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00E9             sprintf(clock_buffer, "Minute: %02d", m);
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 00EA             lcd_puts(clock_buffer);
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 00EB             delay_ms(50);
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 00EC             while (PINB & (1 << PINB1));
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 00ED             delay_ms(50);
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 00EE         }
; 0000 00EF 
; 0000 00F0         // Check if button on PB2 is pressed to increment second
; 0000 00F1         if (PINB & (1 << PINB2))
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 00F2         {
; 0000 00F3             s = (s + 1) % 60;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 00F4             lcd_gotoxy(0, 1);
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 00F5             sprintf(clock_buffer, "Second: %02d", s);
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 00F6             lcd_puts(clock_buffer);
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 00F7             delay_ms(50);
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 00F8             while (PINB & (1 << PINB2));
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 00F9             delay_ms(50);
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 00FA         }
; 0000 00FB 
; 0000 00FC         // Check if the save button on PB3 is pressed to save the time
; 0000 00FD         if (PINB & (1 << PINB3))
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 00FE         {
; 0000 00FF             lcd_clear();
;PCODE: $00000180 VOL: 0
; 0000 0100             lcd_gotoxy(0, 0);
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 0101             lcd_puts("Time Saved");
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 0102             delay_ms(1000);
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 0103             while (PINB & (1 << PINB3));
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 0104             delay_ms(50);
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 0105             break;
;PCODE: $00000193 VOL: 0
; 0000 0106         }
; 0000 0107     }
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 0108 
; 0000 0109     // Reset Timer2 counter after setting time
; 0000 010A     TCNT2 = 0x00;
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 010B     // Re-enable Timer2 interrupt
; 0000 010C     TIMSK |= (1<<TOIE2);
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 010D 
; 0000 010E     // Clear the LCD after setting the time
; 0000 010F     lcd_clear();
;PCODE: $0000019C VOL: 0
; 0000 0110 }
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0

	.DSEG
_0x1B:
	.BYTE 0x15
;
;// Function to set the alarm time using buttons
;void set_alarm(void)
; 0000 0114 {

	.CSEG
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 0115     unsigned char temp_m = 0, temp_s = 0;
; 0000 0116 
; 0000 0117     lcd_clear();
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;	temp_m -> R17
;	temp_s -> R16
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 0118     lcd_gotoxy(0, 0);
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 0119     lcd_puts("Set Alarm:");
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 011A 
; 0000 011B     while (1)
;PCODE: $000001AF VOL: 0
; 0000 011C     {
; 0000 011D         // Check if button on PB1 is pressed to increment minute
; 0000 011E         if (PINB & (1 << PINB1))
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 011F         {
; 0000 0120             temp_m = (temp_m + 1) % 60;
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 0121             lcd_gotoxy(0, 1);
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 0122             sprintf(alarm_buffer, "Minute: %02d", temp_m);
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 0123             lcd_puts(alarm_buffer);
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 0124             delay_ms(50);
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 0125             while (PINB & (1 << PINB1));
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 0126         }
; 0000 0127 
; 0000 0128         // Check if button on PB2 is pressed to increment second
; 0000 0129         if (PINB & (1 << PINB2))
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 012A         {
; 0000 012B             temp_s = (temp_s + 1) % 60;
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 012C             lcd_gotoxy(0, 1);
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 012D             sprintf(alarm_buffer, "Second: %02d", temp_s);
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0000 012E             lcd_puts(alarm_buffer);
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 012F             delay_ms(50);
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 0130             while (PINB & (1 << PINB2));
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0000 0131         }
; 0000 0132 
; 0000 0133         // Check if the save button on PB3 is pressed to save the alarm time
; 0000 0134         if (PINB & (1 << PINB3))
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 0135         {
; 0000 0136             // Calculate the alarm time based on the current time plus the user-defined duration
; 0000 0137             alarm_s = s + temp_s;
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 0138             alarm_m = m + temp_m + (alarm_s / 60);
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0000 0139             alarm_h = h + (alarm_m / 60);
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0000 013A             alarm_s %= 60;
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 013B             alarm_m %= 60;
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 013C             alarm_h %= 24;
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 013D             alarm_set = 1;
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0000 013E 
; 0000 013F             lcd_clear();
;PCODE: $00000223 VOL: 0
; 0000 0140             lcd_gotoxy(0, 0);
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 0141             lcd_puts("Alarm Set");
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0000 0142             delay_ms(1000);
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0000 0143             get_time();
;PCODE: $0000022D VOL: 0
; 0000 0144             break;
;PCODE: $0000022E VOL: 0
; 0000 0145         }
; 0000 0146     }
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 0147 }
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0

	.DSEG
_0x2F:
	.BYTE 0x15
;
;// Function to check if the alarm time matches the current time
;void check_alarm(void)
; 0000 014B {

	.CSEG
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 014C     if (alarm_set && h == alarm_h && m == alarm_m && s == alarm_s)
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0000 014D     {
; 0000 014E         PORTB |= (1 << PORTB4); // Turn on the buzzer
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0000 014F         delay_ms(1000); // Sound the buzzer for 1 second
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
; 0000 0150         PORTB &= ~(1 << PORTB4); // Turn off the buzzer
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
; 0000 0151         alarm_set = 0; // Reset the alarm
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0000 0152     }
; 0000 0153 }
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
